apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: containerdenywithoutresourcerequests01
spec:
  crd:
    spec:
      names:
        kind: ContainerDenyWithoutResourceRequests01
  targets:
  - libs:
    - |-
      package lib.core

      default is_gatekeeper = false

      is_gatekeeper {
        has_field(input, "review")
        has_field(input.review, "object")
      }

      resource = input.review.object {
        is_gatekeeper
      }

      resource = input {
        not is_gatekeeper
      }

      format(msg) = {"msg": msg}

      format_with_id(msg, id) = msg_fmt {
        msg_fmt := {
          "msg": sprintf("%s: %s", [id, msg]),
          "details": {"policyID": id},
        }
      }

      apiVersion = resource.apiVersion

      name = resource.metadata.name

      kind = resource.kind

      labels = resource.metadata.labels

      annotations = resource.metadata.annotations

      gv := split(apiVersion, "/")

      group = gv[0] {
        contains(apiVersion, "/")
      }

      group = "core" {
        not contains(apiVersion, "/")
      }

      version := gv[minus(count(gv), 1)]

      has_field(obj, field) {
        not object.get(obj, field, "N_DEFINED") == "N_DEFINED"
      }

      missing_field(obj, field) {
        obj[field] == ""
      }

      missing_field(obj, field) {
        not has_field(obj, field)
      }
    - |-
      package lib.pods

      import data.lib.core

      default pod = false

      pod = core.resource.spec.template {
        pod_templates := ["daemonset", "deployment", "job", "replicaset", "replicationcontroller", "statefulset"]
        lower(core.kind) == pod_templates[_]
      }

      pod = core.resource {
        lower(core.kind) == "pod"
      }

      pod = core.resource.spec.jobTemplate.spec.template {
        lower(core.kind) == "cronjob"
      }

      containers[container] {
        keys = {"containers", "initContainers"}
        all_containers = [c | keys[k]; c = pod.spec[k][_]]
        container = all_containers[_]
      }

      volumes[volume] {
        volume = pod.spec.volumes[_]
      }
    rego: |-
      package container_deny_without_resource_requests_01

      import data.lib.core
      import data.lib.pods

      policyID := "P0003"

      violation[msg] {
        container := pods.containers[_]
        not container_requests_provided(container)

        msg := core.format_with_id(sprintf("%s/%s/%s: Container resource requests cpu and memory must be specified", [core.kind, core.name, container.name]), policyID)
      }

      violation[msg] {
        container := pods.containers[_]
        not container_requests_zero_memory(container)

        msg := core.format_with_id(sprintf("%s/%s/%s: Container resource memory requests can not have zero value (%s)", [core.kind, core.name, container.name, container.resources.requests.memory]), policyID)
      }

      violation[msg] {
        container := pods.containers[_]
        not container_requests_zero_cpu(container)

        msg := core.format_with_id(sprintf("%s/%s/%s: Container resource cpu requests can not have zero value (%s)", [core.kind, core.name, container.name, container.resources.requests.cpu]), policyID)
      }

      container_requests_provided(container) {
        container.resources.requests.cpu
        container.resources.requests.memory
      }

      container_requests_zero_memory(container) {
        not regex.match("^0.*", container.resources.requests.memory)
      }

      container_requests_zero_cpu(container) {
        not regex.match("^0.*", container.resources.requests.cpu)
      }
    target: admission.k8s.gatekeeper.sh
status: {}
